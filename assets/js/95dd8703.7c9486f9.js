"use strict";(self.webpackChunkmapillary_js_doc=self.webpackChunkmapillary_js_doc||[]).push([[3805],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return k}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),d=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(r),k=n,u=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return r?a.createElement(u,l(l({ref:t},s),{},{components:r})):a.createElement(u,l({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var d=2;d<i;d++)l[d]=r[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},5241:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=r(2122),n=r(9756),i=(r(7294),r(3905)),l={id:"api.S2GeometryProvider",title:"Class: S2GeometryProvider",sidebar_label:"S2GeometryProvider",custom_edit_url:null},o=void 0,p={unversionedId:"classes/api.S2GeometryProvider",id:"classes/api.S2GeometryProvider",isDocsHomePage:!1,title:"Class: S2GeometryProvider",description:"api.S2GeometryProvider",source:"@site/api/classes/api.S2GeometryProvider.md",sourceDirName:"classes",slug:"/classes/api.S2GeometryProvider",permalink:"/mapillary-js/api/classes/api.S2GeometryProvider",editUrl:null,tags:[],version:"current",frontMatter:{id:"api.S2GeometryProvider",title:"Class: S2GeometryProvider",sidebar_label:"S2GeometryProvider",custom_edit_url:null},sidebar:"api",previous:{title:"GraphDataProvider",permalink:"/mapillary-js/api/classes/api.GraphDataProvider"},next:{title:"BearingComponent",permalink:"/mapillary-js/api/classes/component.BearingComponent"}},d=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Methods",id:"methods",children:[{value:"bboxToCellIds",id:"bboxtocellids",children:[]},{value:"getAdjacent",id:"getadjacent",children:[]},{value:"getVertices",id:"getvertices",children:[]},{value:"lngLatToCellId",id:"lnglattocellid",children:[]}]}],s={toc:d};function m(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/modules/api"},"api"),".S2GeometryProvider"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"classdesc"))," Geometry provider based on S2 cells."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class MyDataProvider extends DataProviderBase {\n     ...\n}\n\nconst geometryProvider = new S2GeometryProvider();\nconst dataProvider = new MyDataProvider(geometryProvider);\n")),(0,i.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},(0,i.kt)("inlineCode",{parentName:"a"},"GeometryProviderBase"))),(0,i.kt)("p",{parentName:"li"},"\u21b3 ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"S2GeometryProvider"))))),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"new S2GeometryProvider"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"_level?"),")"),(0,i.kt)("p",null,"Create a new S2 geometry provider instance."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"_level")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"17"))))),(0,i.kt)("h4",{id:"overrides"},"Overrides"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},"GeometryProviderBase"),".",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase#constructor"},"constructor")),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/0ab0a161/src/api/S2GeometryProvider.ts#L25"},"api/S2GeometryProvider.ts:25")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"bboxtocellids"},"bboxToCellIds"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"bboxToCellIds"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"sw"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ne"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,i.kt)("p",null,"Convert a geodetic bounding box to the the minimum set\nof cell ids containing the bounding box."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"sw")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.LngLat"},(0,i.kt)("inlineCode",{parentName:"a"},"LngLat"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"South west corner of bounding box.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ne")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.LngLat"},(0,i.kt)("inlineCode",{parentName:"a"},"LngLat"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"North east corner of bounding box.")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,i.kt)("p",null,"Array of cell ids."),(0,i.kt)("h4",{id:"overrides-1"},"Overrides"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},"GeometryProviderBase"),".",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase#bboxtocellids"},"bboxToCellIds")),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/0ab0a161/src/api/S2GeometryProvider.ts#L28"},"api/S2GeometryProvider.ts:28")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getadjacent"},"getAdjacent"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getAdjacent"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"cellId"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,i.kt)("p",null,"Get the cell ids of all adjacent cells."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cellId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Id of cell.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,i.kt)("p",null,"Array of cell ids. No specific\norder is guaranteed."),(0,i.kt)("h4",{id:"overrides-2"},"Overrides"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},"GeometryProviderBase"),".",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase#getadjacent"},"getAdjacent")),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/0ab0a161/src/api/S2GeometryProvider.ts#L33"},"api/S2GeometryProvider.ts:33")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getvertices"},"getVertices"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getVertices"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"cellId"),"): ",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.LngLat"},(0,i.kt)("inlineCode",{parentName:"a"},"LngLat")),"[]"),(0,i.kt)("p",null,"Get the vertices of a cell."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cellId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Id of cell.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.LngLat"},(0,i.kt)("inlineCode",{parentName:"a"},"LngLat")),"[]"),(0,i.kt)("p",null,"Unclosed clockwise polygon."),(0,i.kt)("h4",{id:"overrides-3"},"Overrides"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},"GeometryProviderBase"),".",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase#getvertices"},"getVertices")),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/0ab0a161/src/api/S2GeometryProvider.ts#L64"},"api/S2GeometryProvider.ts:64")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"lnglattocellid"},"lngLatToCellId"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"lngLatToCellId"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"lngLat"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Convert geodetic coordinates to a cell id."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"lngLat")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.LngLat"},(0,i.kt)("inlineCode",{parentName:"a"},"LngLat"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Longitude, latitude to convert.")))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Cell id for the longitude, latitude."),(0,i.kt)("h4",{id:"overrides-4"},"Overrides"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase"},"GeometryProviderBase"),".",(0,i.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.GeometryProviderBase#lnglattocellid"},"lngLatToCellId")),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/0ab0a161/src/api/S2GeometryProvider.ts#L76"},"api/S2GeometryProvider.ts:76")))}m.isMDXComponent=!0}}]);